"""
Django settings for easypostly project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
"""
Django settings for backend project.
Generated by 'django-admin startproject' using Django 4.2.6.
For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from  . import firebase_admin_setup
import json

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG")

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    "rest_framework.authtoken",
    'authentificationapp',
    'corsheaders',
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.common.CommonMiddleware",
]

ROOT_URLCONF = 'easypostly.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'easypostly.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



redirect_uris = [os.getenv("REDIRECT_URI_GOOGLE_LOCAL"), os.getenv("REDIRECT_URI_GOOGLE_PUBLIC")]
# Google cloud credentials (google Login)
GOOGLE_CLOUD_CREDENTAILS  = {"web":{
    "client_id": os.getenv("CLIENT_ID"),
    "project_id": os.getenv("PROJECT_ID"),
    "auth_uri": os.getenv("AUTH_URI"),
    "token_uri": os.getenv("TOKEN_URI"),
    "auth_provider_x509_cert_urlL": os.getenv("AUTH_PROVIDER_X509_CERT_URL"),
    "client_secret": os.getenv("CLIENT_SECRET"),
    "redirect_uris":redirect_uris
}}


# Front end url
FRONT_END_URL = os.getenv("FRONT_END_URL")

# Backend url
BACKEND_URL = os.getenv("BACKEND_URL")

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "authentificationapp.backends.ModelBackend",
]

# Set the authentication classes
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
    ],
}

if not DEBUG:
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'] = [
        'rest_framework.renderers.JSONRenderer',
    ]



CORS_ALLOW_METHODS = ["GET", "POST", "PUT", "DELETE", "OPTIONS"]

CORS_ALLOW_HEADERS = [
    "Content-Type",
    "Authorization",
    "Access-Control-Allow-Origin",
]
# This ensures cookies are only sent over HTTPS
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True


if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True

if not DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True
    CORS_ALLOWED_ORIGINS = [
            FRONT_END_URL
        ]

BRAND_NAME = os.getenv("BRAND_NAME")


# Other security-related settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST_SMTP = os.getenv("EMAIL_HOST_SMTP")
EMAIL_HOST_IMAP = os.getenv("EMAIL_HOST_IMAP")

EMAIL_PORT_SMTP = os.getenv("EMAIL_PORT_SMTP")
EMAIL_PORT_IMAP = os.getenv("EMAIL_PORT_IMAP")

EMAIL_HOST_USER = os.getenv("EMAIL_ADRESS")  # Your Gmail address
EMAIL_USE_SSL = True
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")

EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"
EMAIL_FILE_PATH = "authentificationapp/emails"  # This will create an 'emails' directory inside 'app'


PLANS = [("Free","free") , ("Starter", "starter"),  ("Pro", "pro")]

STRIPE_TEST_MODE = os.getenv("STRIPE_TEST_MODE")

if STRIPE_TEST_MODE:
    STRIPE_PUBLIC_KEY = os.getenv("STRIPE_PUBLIC_TEST_KEY")
    STRIPE_PRIVATE_KEY =  os.getenv("STRIPE_PRIVATE_TEST_KEY")
    WEBHOOK_SECRET =  os.getenv("WEBHOOK_SECRET_TEST_KEY")

if not STRIPE_TEST_MODE:
    STRIPE_PUBLIC_KEY = os.getenv("STRIPE_PUBLIC_KEY")
    STRIPE_PRIVATE_KEY =  os.getenv("STRIPE_PRIVATE_KEY")
    WEBHOOK_SECRET =  os.getenv("WEBHOOK_SECRET_KEY")


# TODO : Make sure these are the scopes you have in google cloud
GOOGLE_SCOPES = [
                'https://www.googleapis.com/auth/userinfo.email',
                'https://www.googleapis.com/auth/userinfo.profile',
                'openid']